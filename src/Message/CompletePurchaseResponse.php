<?php

/*
 * InterKassa driver for the Omnipay PHP payment processing library
 *
 * @link      https://github.com/hiqdev/omnipay-interkassa
 * @package   omnipay-interkassa
 * @license   BSD-3-Clause
 * @copyright Copyright (c) 2015, HiQDev (http://hiqdev.com/)
 */

namespace Omnipay\InterKassa\Message;

use Omnipay\Common\Exception\InvalidResponseException;
use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RequestInterface;

/**
 * InterKassa Complete Purchase Response.
 */
class CompletePurchaseResponse extends AbstractResponse
{
    public function __construct(RequestInterface $request, $data)
    {
        $this->request = $request;
        $this->data    = $data;

        if ($this->getHash() !== $this->calculateHash()) {
            throw new InvalidResponseException('Invalid hash');
        }

        if ($this->request->getTestMode() !== $this->getTestMode()) {
            throw new InvalidResponseException('Invalid test mode');
        }
    }

    public function isSuccessful()
    {
        return true;
    }

    /**
     * The transaction identifier generated by the merchant website.
     */
    public function getTransactionId()
    {
        return $this->data['LMI_PAYMENT_NO'];
    }

    /**
     * The transaction identifier generated by the payment gateway.
     */
    public function getTransactionReference()
    {
        return $this->data['LMI_SYS_TRANS_NO'];
    }

    /**
     * The payer reference given by the payment gateway.
     */
    public function getPayerReference()
    {
        return $this->data['LMI_PAYER_PURSE'] . '/' . $this->data['LMI_PAYER_WM'];
    }

    public function getAmount()
    {
        return $this->data['ik_am'];
    }

    public function getTestMode()
    {
        return (bool) $this->data['LMI_MODE'];
    }

    public function getPaymentNo()
    {
        return $this->username . '_' . $this->cents . '_' . $this->uniqId;
    }

    public function getPaymentId()
    {
        return (strpos($this->username, '@') === false ? $this->username : substr($this->username, 0, strpos($this->username) + 1)) . '_' . $this->uniqId;
    }

    public function validateConfirmation($data)
    {
        return $this->isNewVersion()
            ? $this->validateNewVersion($data)
            : $this->validateOldVersion($data);
    }

    public function validateNewVersion($data)
    {
        $iks = $data;
        if ($data['ik_co_id'] !== $this->purse) {
            return 'Wrong purse';
        }
        if ($data['ik_inv_st'] !== 'success') {
            return 'Wrong state';
        }
        unset($iks['ik_sign']);
        foreach ($iks as $k => $v) {
            if (substr($k, 0, 3) !== 'ik_') {
                unset($iks[$k]);
            }
        }
        array_push($iks, $this->_secret);
        ksort($iks, SORT_STRING);
        $hash = base64_encode(md5(implode(':', $iks), true));
        if ($hash !== strtolower($data['ik_sign'])) {
            return 'Wrong hash';
        }
        $this->mset([
            'from' => $data['ik_pm_no'],
            'txn'  => $data['ik_trn_id '],
            'sum'  => $data['ik_am'],
            'time' => $this->formatDatetime($data['ik_inv_prc']),
        ]);

        return;
    }

    public function validateOldVersion($data)
    {
        $iks = $data;
        if ($data['ik_shop_id'] !== $this->purse) {
            return 'Wrong purse';
        }
        if ($data['ik_payment_state'] !== 'success') {
            return 'Wrong state';
        }
        unset($iks['ik_sign_hash'], $iks['ik_payment_desc'], $iks['ik_payment_timestamp']);
        foreach ($iks as $k => $v) {
            if (substr($k, 0, 3) !== 'ik_') {
                unset($iks[$k]);
            }
        }
        array_push($iks, $this->_secret);
        $hash = md5(implode(':', $iks));
        if ($hash !== strtolower($data['ik_sign_hash'])) {
            return 'Wrong hash';
        }
        $this->mset([
            'from' => $data['ik_payment_id'],
            'txn'  => $data['ik_trans_id'],
            'sum'  => $data['ik_payment_amount'],
            'time' => $this->formatDatetime($data['ik_payment_timestamp']),
        ]);

        return;
    }
}
